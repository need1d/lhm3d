import bpy


def write_some_data(context, filepath):

    f = open(filepath, 'w', encoding='utf-8')
    
    
    for ob in bpy.data.objects:
        if ob.type == 'MESH':
               position, quaternion, scale = ob.matrix_world.decompose()
               y = quaternion[2]
               quaternion[2] = quaternion[3]
               quaternion[3] = y
               rotation = quaternion.to_euler("XYZ")
               
               f.write('%s %f %f %f %f %f %f %f\n' % (ob.name, ob.location[0], ob.location[1], ob.location[2], rotation.x, rotation.y, rotation.z, ob.scale[0]))
               
               #f.write('%s %f %f %f %f %f %f %f\n' % (ob.name, ob.location[0], ob.location[1], ob.location[2], ob.rotation_euler[0], ob.rotation_euler[1], ob.rotation_euler[2], ob.scale[0]))
        
    f.close()

    return {'FINISHED'}


# ExportHelper is a helper class, defines filename and
# invoke() function which calls the file selector.
from bpy_extras.io_utils import ExportHelper
from bpy.props import StringProperty, BoolProperty, EnumProperty
from bpy.types import Operator


class ExportSomeData(Operator, ExportHelper):
    """This appears in the tooltip of the operator and in the generated docs"""
    bl_idname = "export_test.some_data"  # important since its how bpy.ops.import_test.some_data is constructed
    bl_label = "Export Scene Objects"

    # ExportHelper mixin class uses this
    filename_ext = ".txt"

    filter_glob = StringProperty(
            default="*.txt",
            options={'HIDDEN'},
            )

    # List of operator properties, the attributes will be assigned
    # to the class instance from the operator settings before calling.
   
    def execute(self, context):
        return write_some_data(context, self.filepath)


# Only needed if you want to add into a dynamic menu
def menu_func_export(self, context):
    self.layout.operator(ExportSomeData.bl_idname, text="Text Export Operator")


def register():
    bpy.utils.register_class(ExportSomeData)
    bpy.types.INFO_MT_file_export.append(menu_func_export)


def unregister():
    bpy.utils.unregister_class(ExportSomeData)
    bpy.types.INFO_MT_file_export.remove(menu_func_export)


if __name__ == "__main__":
    register()

    # test call
    bpy.ops.export_test.some_data('INVOKE_DEFAULT')
